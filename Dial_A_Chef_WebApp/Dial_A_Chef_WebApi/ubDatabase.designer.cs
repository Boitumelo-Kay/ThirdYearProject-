#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dial_A_Chef_WebApi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UntitledBytesDB")]
	public partial class ubDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertChef(Chef instance);
    partial void UpdateChef(Chef instance);
    partial void DeleteChef(Chef instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertMessageHistory(MessageHistory instance);
    partial void UpdateMessageHistory(MessageHistory instance);
    partial void DeleteMessageHistory(MessageHistory instance);
    partial void InsertBlockedAccount(BlockedAccount instance);
    partial void UpdateBlockedAccount(BlockedAccount instance);
    partial void DeleteBlockedAccount(BlockedAccount instance);
    partial void InsertDish(Dish instance);
    partial void UpdateDish(Dish instance);
    partial void DeleteDish(Dish instance);
    partial void InsertDishCatBridge(DishCatBridge instance);
    partial void UpdateDishCatBridge(DishCatBridge instance);
    partial void DeleteDishCatBridge(DishCatBridge instance);
    partial void InsertAdministrator(Administrator instance);
    partial void UpdateAdministrator(Administrator instance);
    partial void DeleteAdministrator(Administrator instance);
    partial void InsertMealCategory(MealCategory instance);
    partial void UpdateMealCategory(MealCategory instance);
    partial void DeleteMealCategory(MealCategory instance);
    partial void InsertDishOrderBridge(DishOrderBridge instance);
    partial void UpdateDishOrderBridge(DishOrderBridge instance);
    partial void DeleteDishOrderBridge(DishOrderBridge instance);
    partial void InsertOrderPayDetail(OrderPayDetail instance);
    partial void UpdateOrderPayDetail(OrderPayDetail instance);
    partial void DeleteOrderPayDetail(OrderPayDetail instance);
    partial void InsertCookingSession(CookingSession instance);
    partial void UpdateCookingSession(CookingSession instance);
    partial void DeleteCookingSession(CookingSession instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertDelivery(Delivery instance);
    partial void UpdateDelivery(Delivery instance);
    partial void DeleteDelivery(Delivery instance);
    #endregion
		
		public ubDatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UntitledBytesDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ubDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ubDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ubDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ubDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Chef> Chefs
		{
			get
			{
				return this.GetTable<Chef>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<MessageHistory> MessageHistories
		{
			get
			{
				return this.GetTable<MessageHistory>();
			}
		}
		
		public System.Data.Linq.Table<BlockedAccount> BlockedAccounts
		{
			get
			{
				return this.GetTable<BlockedAccount>();
			}
		}
		
		public System.Data.Linq.Table<Dish> Dishes
		{
			get
			{
				return this.GetTable<Dish>();
			}
		}
		
		public System.Data.Linq.Table<DishCatBridge> DishCatBridges
		{
			get
			{
				return this.GetTable<DishCatBridge>();
			}
		}
		
		public System.Data.Linq.Table<Administrator> Administrators
		{
			get
			{
				return this.GetTable<Administrator>();
			}
		}
		
		public System.Data.Linq.Table<MealCategory> MealCategories
		{
			get
			{
				return this.GetTable<MealCategory>();
			}
		}
		
		public System.Data.Linq.Table<DishOrderBridge> DishOrderBridges
		{
			get
			{
				return this.GetTable<DishOrderBridge>();
			}
		}
		
		public System.Data.Linq.Table<OrderPayDetail> OrderPayDetails
		{
			get
			{
				return this.GetTable<OrderPayDetail>();
			}
		}
		
		public System.Data.Linq.Table<CookingSession> CookingSessions
		{
			get
			{
				return this.GetTable<CookingSession>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Delivery> Deliveries
		{
			get
			{
				return this.GetTable<Delivery>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _U_ID;
		
		private string _U_Name;
		
		private string _U_Surname;
		
		private string _U_Email;
		
		private string _U_Password;
		
		private string _U_DOB;
		
		private string _U_ContactNo;
		
		private string _U_Image;
		
		private string _U_Type;
		
		private EntityRef<Chef> _Chef;
		
		private EntityRef<Customer> _Customer;
		
		private EntitySet<MessageHistory> _MessageHistories;
		
		private EntitySet<BlockedAccount> _BlockedAccounts;
		
		private EntityRef<Administrator> _Administrator;
		
		private EntitySet<CookingSession> _CookingSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnU_IDChanging(int value);
    partial void OnU_IDChanged();
    partial void OnU_NameChanging(string value);
    partial void OnU_NameChanged();
    partial void OnU_SurnameChanging(string value);
    partial void OnU_SurnameChanged();
    partial void OnU_EmailChanging(string value);
    partial void OnU_EmailChanged();
    partial void OnU_PasswordChanging(string value);
    partial void OnU_PasswordChanged();
    partial void OnU_DOBChanging(string value);
    partial void OnU_DOBChanged();
    partial void OnU_ContactNoChanging(string value);
    partial void OnU_ContactNoChanged();
    partial void OnU_ImageChanging(string value);
    partial void OnU_ImageChanged();
    partial void OnU_TypeChanging(string value);
    partial void OnU_TypeChanged();
    #endregion
		
		public Account()
		{
			this._Chef = default(EntityRef<Chef>);
			this._Customer = default(EntityRef<Customer>);
			this._MessageHistories = new EntitySet<MessageHistory>(new Action<MessageHistory>(this.attach_MessageHistories), new Action<MessageHistory>(this.detach_MessageHistories));
			this._BlockedAccounts = new EntitySet<BlockedAccount>(new Action<BlockedAccount>(this.attach_BlockedAccounts), new Action<BlockedAccount>(this.detach_BlockedAccounts));
			this._Administrator = default(EntityRef<Administrator>);
			this._CookingSessions = new EntitySet<CookingSession>(new Action<CookingSession>(this.attach_CookingSessions), new Action<CookingSession>(this.detach_CookingSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int U_ID
		{
			get
			{
				return this._U_ID;
			}
			set
			{
				if ((this._U_ID != value))
				{
					this.OnU_IDChanging(value);
					this.SendPropertyChanging();
					this._U_ID = value;
					this.SendPropertyChanged("U_ID");
					this.OnU_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Name", DbType="VarChar(255)")]
		public string U_Name
		{
			get
			{
				return this._U_Name;
			}
			set
			{
				if ((this._U_Name != value))
				{
					this.OnU_NameChanging(value);
					this.SendPropertyChanging();
					this._U_Name = value;
					this.SendPropertyChanged("U_Name");
					this.OnU_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Surname", DbType="VarChar(255)")]
		public string U_Surname
		{
			get
			{
				return this._U_Surname;
			}
			set
			{
				if ((this._U_Surname != value))
				{
					this.OnU_SurnameChanging(value);
					this.SendPropertyChanging();
					this._U_Surname = value;
					this.SendPropertyChanged("U_Surname");
					this.OnU_SurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Email", DbType="VarChar(255)")]
		public string U_Email
		{
			get
			{
				return this._U_Email;
			}
			set
			{
				if ((this._U_Email != value))
				{
					this.OnU_EmailChanging(value);
					this.SendPropertyChanging();
					this._U_Email = value;
					this.SendPropertyChanged("U_Email");
					this.OnU_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Password", DbType="VarChar(255)")]
		public string U_Password
		{
			get
			{
				return this._U_Password;
			}
			set
			{
				if ((this._U_Password != value))
				{
					this.OnU_PasswordChanging(value);
					this.SendPropertyChanging();
					this._U_Password = value;
					this.SendPropertyChanged("U_Password");
					this.OnU_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_DOB", DbType="VarChar(30)")]
		public string U_DOB
		{
			get
			{
				return this._U_DOB;
			}
			set
			{
				if ((this._U_DOB != value))
				{
					this.OnU_DOBChanging(value);
					this.SendPropertyChanging();
					this._U_DOB = value;
					this.SendPropertyChanged("U_DOB");
					this.OnU_DOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_ContactNo", DbType="VarChar(255)")]
		public string U_ContactNo
		{
			get
			{
				return this._U_ContactNo;
			}
			set
			{
				if ((this._U_ContactNo != value))
				{
					this.OnU_ContactNoChanging(value);
					this.SendPropertyChanging();
					this._U_ContactNo = value;
					this.SendPropertyChanged("U_ContactNo");
					this.OnU_ContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Image", DbType="VarChar(255)")]
		public string U_Image
		{
			get
			{
				return this._U_Image;
			}
			set
			{
				if ((this._U_Image != value))
				{
					this.OnU_ImageChanging(value);
					this.SendPropertyChanging();
					this._U_Image = value;
					this.SendPropertyChanged("U_Image");
					this.OnU_ImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Type", DbType="VarChar(255)")]
		public string U_Type
		{
			get
			{
				return this._U_Type;
			}
			set
			{
				if ((this._U_Type != value))
				{
					this.OnU_TypeChanging(value);
					this.SendPropertyChanging();
					this._U_Type = value;
					this.SendPropertyChanged("U_Type");
					this.OnU_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Chef", Storage="_Chef", ThisKey="U_ID", OtherKey="Ch_ID", IsUnique=true, IsForeignKey=false)]
		public Chef Chef
		{
			get
			{
				return this._Chef.Entity;
			}
			set
			{
				Chef previousValue = this._Chef.Entity;
				if (((previousValue != value) 
							|| (this._Chef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chef.Entity = null;
						previousValue.Account = null;
					}
					this._Chef.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Chef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Customer", ThisKey="U_ID", OtherKey="Cu_ID", IsUnique=true, IsForeignKey=false)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Account = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_MessageHistory", Storage="_MessageHistories", ThisKey="U_ID", OtherKey="U_ID")]
		public EntitySet<MessageHistory> MessageHistories
		{
			get
			{
				return this._MessageHistories;
			}
			set
			{
				this._MessageHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_BlockedAccount", Storage="_BlockedAccounts", ThisKey="U_ID", OtherKey="B_UId")]
		public EntitySet<BlockedAccount> BlockedAccounts
		{
			get
			{
				return this._BlockedAccounts;
			}
			set
			{
				this._BlockedAccounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Administrator", Storage="_Administrator", ThisKey="U_ID", OtherKey="Admin_ID", IsUnique=true, IsForeignKey=false)]
		public Administrator Administrator
		{
			get
			{
				return this._Administrator.Entity;
			}
			set
			{
				Administrator previousValue = this._Administrator.Entity;
				if (((previousValue != value) 
							|| (this._Administrator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Administrator.Entity = null;
						previousValue.Account = null;
					}
					this._Administrator.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("Administrator");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CookingSession", Storage="_CookingSessions", ThisKey="U_ID", OtherKey="Cust_Id")]
		public EntitySet<CookingSession> CookingSessions
		{
			get
			{
				return this._CookingSessions;
			}
			set
			{
				this._CookingSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageHistories(MessageHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_MessageHistories(MessageHistory entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_BlockedAccounts(BlockedAccount entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_BlockedAccounts(BlockedAccount entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_CookingSessions(CookingSession entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_CookingSessions(CookingSession entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chefs")]
	public partial class Chef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Ch_ID;
		
		private string _Ch_Type;
		
		private int _Ch_Rating;
		
		private string _Ch_Bio;
		
		private EntitySet<Dish> _Dishes;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCh_IDChanging(int value);
    partial void OnCh_IDChanged();
    partial void OnCh_TypeChanging(string value);
    partial void OnCh_TypeChanged();
    partial void OnCh_RatingChanging(int value);
    partial void OnCh_RatingChanged();
    partial void OnCh_BioChanging(string value);
    partial void OnCh_BioChanged();
    #endregion
		
		public Chef()
		{
			this._Dishes = new EntitySet<Dish>(new Action<Dish>(this.attach_Dishes), new Action<Dish>(this.detach_Dishes));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ch_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Ch_ID
		{
			get
			{
				return this._Ch_ID;
			}
			set
			{
				if ((this._Ch_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCh_IDChanging(value);
					this.SendPropertyChanging();
					this._Ch_ID = value;
					this.SendPropertyChanged("Ch_ID");
					this.OnCh_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ch_Type", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Ch_Type
		{
			get
			{
				return this._Ch_Type;
			}
			set
			{
				if ((this._Ch_Type != value))
				{
					this.OnCh_TypeChanging(value);
					this.SendPropertyChanging();
					this._Ch_Type = value;
					this.SendPropertyChanged("Ch_Type");
					this.OnCh_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ch_Rating", DbType="Int NOT NULL")]
		public int Ch_Rating
		{
			get
			{
				return this._Ch_Rating;
			}
			set
			{
				if ((this._Ch_Rating != value))
				{
					this.OnCh_RatingChanging(value);
					this.SendPropertyChanging();
					this._Ch_Rating = value;
					this.SendPropertyChanged("Ch_Rating");
					this.OnCh_RatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ch_Bio", DbType="VarChar(MAX)")]
		public string Ch_Bio
		{
			get
			{
				return this._Ch_Bio;
			}
			set
			{
				if ((this._Ch_Bio != value))
				{
					this.OnCh_BioChanging(value);
					this.SendPropertyChanging();
					this._Ch_Bio = value;
					this.SendPropertyChanged("Ch_Bio");
					this.OnCh_BioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chef_Dish", Storage="_Dishes", ThisKey="Ch_ID", OtherKey="CHEF_Id")]
		public EntitySet<Dish> Dishes
		{
			get
			{
				return this._Dishes;
			}
			set
			{
				this._Dishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chef_Order", Storage="_Orders", ThisKey="Ch_ID", OtherKey="Chef_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Chef", Storage="_Account", ThisKey="Ch_ID", OtherKey="U_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Chef = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Chef = this;
						this._Ch_ID = value.U_ID;
					}
					else
					{
						this._Ch_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Chef = this;
		}
		
		private void detach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.Chef = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Chef = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Chef = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cu_ID;
		
		private string _Cu_DietaryR;
		
		private int _Cu_Points;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCu_IDChanging(int value);
    partial void OnCu_IDChanged();
    partial void OnCu_DietaryRChanging(string value);
    partial void OnCu_DietaryRChanged();
    partial void OnCu_PointsChanging(int value);
    partial void OnCu_PointsChanged();
    #endregion
		
		public Customer()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cu_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Cu_ID
		{
			get
			{
				return this._Cu_ID;
			}
			set
			{
				if ((this._Cu_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCu_IDChanging(value);
					this.SendPropertyChanging();
					this._Cu_ID = value;
					this.SendPropertyChanged("Cu_ID");
					this.OnCu_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cu_DietaryR", DbType="VarChar(255)")]
		public string Cu_DietaryR
		{
			get
			{
				return this._Cu_DietaryR;
			}
			set
			{
				if ((this._Cu_DietaryR != value))
				{
					this.OnCu_DietaryRChanging(value);
					this.SendPropertyChanging();
					this._Cu_DietaryR = value;
					this.SendPropertyChanged("Cu_DietaryR");
					this.OnCu_DietaryRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cu_Points", DbType="Int NOT NULL")]
		public int Cu_Points
		{
			get
			{
				return this._Cu_Points;
			}
			set
			{
				if ((this._Cu_Points != value))
				{
					this.OnCu_PointsChanging(value);
					this.SendPropertyChanging();
					this._Cu_Points = value;
					this.SendPropertyChanged("Cu_Points");
					this.OnCu_PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Orders", ThisKey="Cu_ID", OtherKey="Cust_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Account", ThisKey="Cu_ID", OtherKey="U_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Customer = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
						this._Cu_ID = value.U_ID;
					}
					else
					{
						this._Cu_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Msg_ID;
		
		private string _Msg_Content;
		
		private System.DateTime _Sent_Date;
		
		private string _Msg_To;
		
		private string _Msg_From;
		
		private EntitySet<MessageHistory> _MessageHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMsg_IDChanging(int value);
    partial void OnMsg_IDChanged();
    partial void OnMsg_ContentChanging(string value);
    partial void OnMsg_ContentChanged();
    partial void OnSent_DateChanging(System.DateTime value);
    partial void OnSent_DateChanged();
    partial void OnMsg_ToChanging(string value);
    partial void OnMsg_ToChanged();
    partial void OnMsg_FromChanging(string value);
    partial void OnMsg_FromChanged();
    #endregion
		
		public Message()
		{
			this._MessageHistories = new EntitySet<MessageHistory>(new Action<MessageHistory>(this.attach_MessageHistories), new Action<MessageHistory>(this.detach_MessageHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Msg_ID
		{
			get
			{
				return this._Msg_ID;
			}
			set
			{
				if ((this._Msg_ID != value))
				{
					this.OnMsg_IDChanging(value);
					this.SendPropertyChanging();
					this._Msg_ID = value;
					this.SendPropertyChanged("Msg_ID");
					this.OnMsg_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg_Content", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Msg_Content
		{
			get
			{
				return this._Msg_Content;
			}
			set
			{
				if ((this._Msg_Content != value))
				{
					this.OnMsg_ContentChanging(value);
					this.SendPropertyChanging();
					this._Msg_Content = value;
					this.SendPropertyChanged("Msg_Content");
					this.OnMsg_ContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sent_Date", DbType="Date NOT NULL")]
		public System.DateTime Sent_Date
		{
			get
			{
				return this._Sent_Date;
			}
			set
			{
				if ((this._Sent_Date != value))
				{
					this.OnSent_DateChanging(value);
					this.SendPropertyChanging();
					this._Sent_Date = value;
					this.SendPropertyChanged("Sent_Date");
					this.OnSent_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg_To", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Msg_To
		{
			get
			{
				return this._Msg_To;
			}
			set
			{
				if ((this._Msg_To != value))
				{
					this.OnMsg_ToChanging(value);
					this.SendPropertyChanging();
					this._Msg_To = value;
					this.SendPropertyChanged("Msg_To");
					this.OnMsg_ToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg_From", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Msg_From
		{
			get
			{
				return this._Msg_From;
			}
			set
			{
				if ((this._Msg_From != value))
				{
					this.OnMsg_FromChanging(value);
					this.SendPropertyChanging();
					this._Msg_From = value;
					this.SendPropertyChanged("Msg_From");
					this.OnMsg_FromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageHistory", Storage="_MessageHistories", ThisKey="Msg_ID", OtherKey="Msg_ID")]
		public EntitySet<MessageHistory> MessageHistories
		{
			get
			{
				return this._MessageHistories;
			}
			set
			{
				this._MessageHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MessageHistories(MessageHistory entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_MessageHistories(MessageHistory entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageHistory")]
	public partial class MessageHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MsgH_ID;
		
		private int _Msg_ID;
		
		private int _U_ID;
		
		private EntityRef<Message> _Message;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMsgH_IDChanging(int value);
    partial void OnMsgH_IDChanged();
    partial void OnMsg_IDChanging(int value);
    partial void OnMsg_IDChanged();
    partial void OnU_IDChanging(int value);
    partial void OnU_IDChanged();
    #endregion
		
		public MessageHistory()
		{
			this._Message = default(EntityRef<Message>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MsgH_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MsgH_ID
		{
			get
			{
				return this._MsgH_ID;
			}
			set
			{
				if ((this._MsgH_ID != value))
				{
					this.OnMsgH_IDChanging(value);
					this.SendPropertyChanging();
					this._MsgH_ID = value;
					this.SendPropertyChanged("MsgH_ID");
					this.OnMsgH_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msg_ID", DbType="Int NOT NULL")]
		public int Msg_ID
		{
			get
			{
				return this._Msg_ID;
			}
			set
			{
				if ((this._Msg_ID != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMsg_IDChanging(value);
					this.SendPropertyChanging();
					this._Msg_ID = value;
					this.SendPropertyChanged("Msg_ID");
					this.OnMsg_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_ID", DbType="Int NOT NULL")]
		public int U_ID
		{
			get
			{
				return this._U_ID;
			}
			set
			{
				if ((this._U_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnU_IDChanging(value);
					this.SendPropertyChanging();
					this._U_ID = value;
					this.SendPropertyChanged("U_ID");
					this.OnU_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageHistory", Storage="_Message", ThisKey="Msg_ID", OtherKey="Msg_ID", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.MessageHistories.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.MessageHistories.Add(this);
						this._Msg_ID = value.Msg_ID;
					}
					else
					{
						this._Msg_ID = default(int);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_MessageHistory", Storage="_Account", ThisKey="U_ID", OtherKey="U_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.MessageHistories.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.MessageHistories.Add(this);
						this._U_ID = value.U_ID;
					}
					else
					{
						this._U_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BlockedAccount")]
	public partial class BlockedAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _B_Id;
		
		private string _B_Email;
		
		private System.DateTime _B_DateBlocked;
		
		private System.DateTime _B_DateUnblocked;
		
		private string _B_Reason;
		
		private bool _B_IsBlocked;
		
		private int _B_UId;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnB_IdChanging(int value);
    partial void OnB_IdChanged();
    partial void OnB_EmailChanging(string value);
    partial void OnB_EmailChanged();
    partial void OnB_DateBlockedChanging(System.DateTime value);
    partial void OnB_DateBlockedChanged();
    partial void OnB_DateUnblockedChanging(System.DateTime value);
    partial void OnB_DateUnblockedChanged();
    partial void OnB_ReasonChanging(string value);
    partial void OnB_ReasonChanged();
    partial void OnB_IsBlockedChanging(bool value);
    partial void OnB_IsBlockedChanged();
    partial void OnB_UIdChanging(int value);
    partial void OnB_UIdChanged();
    #endregion
		
		public BlockedAccount()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int B_Id
		{
			get
			{
				return this._B_Id;
			}
			set
			{
				if ((this._B_Id != value))
				{
					this.OnB_IdChanging(value);
					this.SendPropertyChanging();
					this._B_Id = value;
					this.SendPropertyChanged("B_Id");
					this.OnB_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_Email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string B_Email
		{
			get
			{
				return this._B_Email;
			}
			set
			{
				if ((this._B_Email != value))
				{
					this.OnB_EmailChanging(value);
					this.SendPropertyChanging();
					this._B_Email = value;
					this.SendPropertyChanged("B_Email");
					this.OnB_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_DateBlocked", DbType="DateTime NOT NULL")]
		public System.DateTime B_DateBlocked
		{
			get
			{
				return this._B_DateBlocked;
			}
			set
			{
				if ((this._B_DateBlocked != value))
				{
					this.OnB_DateBlockedChanging(value);
					this.SendPropertyChanging();
					this._B_DateBlocked = value;
					this.SendPropertyChanged("B_DateBlocked");
					this.OnB_DateBlockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_DateUnblocked", DbType="DateTime NOT NULL")]
		public System.DateTime B_DateUnblocked
		{
			get
			{
				return this._B_DateUnblocked;
			}
			set
			{
				if ((this._B_DateUnblocked != value))
				{
					this.OnB_DateUnblockedChanging(value);
					this.SendPropertyChanging();
					this._B_DateUnblocked = value;
					this.SendPropertyChanged("B_DateUnblocked");
					this.OnB_DateUnblockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_Reason", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string B_Reason
		{
			get
			{
				return this._B_Reason;
			}
			set
			{
				if ((this._B_Reason != value))
				{
					this.OnB_ReasonChanging(value);
					this.SendPropertyChanging();
					this._B_Reason = value;
					this.SendPropertyChanged("B_Reason");
					this.OnB_ReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_IsBlocked", DbType="Bit NOT NULL")]
		public bool B_IsBlocked
		{
			get
			{
				return this._B_IsBlocked;
			}
			set
			{
				if ((this._B_IsBlocked != value))
				{
					this.OnB_IsBlockedChanging(value);
					this.SendPropertyChanging();
					this._B_IsBlocked = value;
					this.SendPropertyChanged("B_IsBlocked");
					this.OnB_IsBlockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B_UId", DbType="Int NOT NULL")]
		public int B_UId
		{
			get
			{
				return this._B_UId;
			}
			set
			{
				if ((this._B_UId != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnB_UIdChanging(value);
					this.SendPropertyChanging();
					this._B_UId = value;
					this.SendPropertyChanged("B_UId");
					this.OnB_UIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_BlockedAccount", Storage="_Account", ThisKey="B_UId", OtherKey="U_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.BlockedAccounts.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.BlockedAccounts.Add(this);
						this._B_UId = value.U_ID;
					}
					else
					{
						this._B_UId = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish")]
	public partial class Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _M_Id;
		
		private string _M_MealImage;
		
		private string _M_Name;
		
		private int _M_Points;
		
		private string _M_Ingridients;
		
		private string _M_Description;
		
		private System.Nullable<int> _CAT_Id;
		
		private System.Nullable<int> _CHEF_Id;
		
		private EntitySet<DishCatBridge> _DishCatBridges;
		
		private EntitySet<DishOrderBridge> _DishOrderBridges;
		
		private EntitySet<Order> _Orders;
		
		private EntityRef<Chef> _Chef;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnM_IdChanging(int value);
    partial void OnM_IdChanged();
    partial void OnM_MealImageChanging(string value);
    partial void OnM_MealImageChanged();
    partial void OnM_NameChanging(string value);
    partial void OnM_NameChanged();
    partial void OnM_PointsChanging(int value);
    partial void OnM_PointsChanged();
    partial void OnM_IngridientsChanging(string value);
    partial void OnM_IngridientsChanged();
    partial void OnM_DescriptionChanging(string value);
    partial void OnM_DescriptionChanged();
    partial void OnCAT_IdChanging(System.Nullable<int> value);
    partial void OnCAT_IdChanged();
    partial void OnCHEF_IdChanging(System.Nullable<int> value);
    partial void OnCHEF_IdChanged();
    #endregion
		
		public Dish()
		{
			this._DishCatBridges = new EntitySet<DishCatBridge>(new Action<DishCatBridge>(this.attach_DishCatBridges), new Action<DishCatBridge>(this.detach_DishCatBridges));
			this._DishOrderBridges = new EntitySet<DishOrderBridge>(new Action<DishOrderBridge>(this.attach_DishOrderBridges), new Action<DishOrderBridge>(this.detach_DishOrderBridges));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Chef = default(EntityRef<Chef>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int M_Id
		{
			get
			{
				return this._M_Id;
			}
			set
			{
				if ((this._M_Id != value))
				{
					this.OnM_IdChanging(value);
					this.SendPropertyChanging();
					this._M_Id = value;
					this.SendPropertyChanged("M_Id");
					this.OnM_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_MealImage", DbType="VarChar(MAX)")]
		public string M_MealImage
		{
			get
			{
				return this._M_MealImage;
			}
			set
			{
				if ((this._M_MealImage != value))
				{
					this.OnM_MealImageChanging(value);
					this.SendPropertyChanging();
					this._M_MealImage = value;
					this.SendPropertyChanged("M_MealImage");
					this.OnM_MealImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string M_Name
		{
			get
			{
				return this._M_Name;
			}
			set
			{
				if ((this._M_Name != value))
				{
					this.OnM_NameChanging(value);
					this.SendPropertyChanging();
					this._M_Name = value;
					this.SendPropertyChanged("M_Name");
					this.OnM_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Points", DbType="Int NOT NULL")]
		public int M_Points
		{
			get
			{
				return this._M_Points;
			}
			set
			{
				if ((this._M_Points != value))
				{
					this.OnM_PointsChanging(value);
					this.SendPropertyChanging();
					this._M_Points = value;
					this.SendPropertyChanged("M_Points");
					this.OnM_PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Ingridients", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string M_Ingridients
		{
			get
			{
				return this._M_Ingridients;
			}
			set
			{
				if ((this._M_Ingridients != value))
				{
					this.OnM_IngridientsChanging(value);
					this.SendPropertyChanging();
					this._M_Ingridients = value;
					this.SendPropertyChanged("M_Ingridients");
					this.OnM_IngridientsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string M_Description
		{
			get
			{
				return this._M_Description;
			}
			set
			{
				if ((this._M_Description != value))
				{
					this.OnM_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._M_Description = value;
					this.SendPropertyChanged("M_Description");
					this.OnM_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAT_Id", DbType="Int")]
		public System.Nullable<int> CAT_Id
		{
			get
			{
				return this._CAT_Id;
			}
			set
			{
				if ((this._CAT_Id != value))
				{
					this.OnCAT_IdChanging(value);
					this.SendPropertyChanging();
					this._CAT_Id = value;
					this.SendPropertyChanged("CAT_Id");
					this.OnCAT_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHEF_Id", DbType="Int")]
		public System.Nullable<int> CHEF_Id
		{
			get
			{
				return this._CHEF_Id;
			}
			set
			{
				if ((this._CHEF_Id != value))
				{
					if (this._Chef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCHEF_IdChanging(value);
					this.SendPropertyChanging();
					this._CHEF_Id = value;
					this.SendPropertyChanged("CHEF_Id");
					this.OnCHEF_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishCatBridge", Storage="_DishCatBridges", ThisKey="M_Id", OtherKey="M_ID")]
		public EntitySet<DishCatBridge> DishCatBridges
		{
			get
			{
				return this._DishCatBridges;
			}
			set
			{
				this._DishCatBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishOrderBridge", Storage="_DishOrderBridges", ThisKey="M_Id", OtherKey="Dish_Id")]
		public EntitySet<DishOrderBridge> DishOrderBridges
		{
			get
			{
				return this._DishOrderBridges;
			}
			set
			{
				this._DishOrderBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Order", Storage="_Orders", ThisKey="M_Id", OtherKey="Dish_ID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chef_Dish", Storage="_Chef", ThisKey="CHEF_Id", OtherKey="Ch_ID", IsForeignKey=true)]
		public Chef Chef
		{
			get
			{
				return this._Chef.Entity;
			}
			set
			{
				Chef previousValue = this._Chef.Entity;
				if (((previousValue != value) 
							|| (this._Chef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chef.Entity = null;
						previousValue.Dishes.Remove(this);
					}
					this._Chef.Entity = value;
					if ((value != null))
					{
						value.Dishes.Add(this);
						this._CHEF_Id = value.Ch_ID;
					}
					else
					{
						this._CHEF_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chef");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishCatBridges(DishCatBridge entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_DishCatBridges(DishCatBridge entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_DishOrderBridges(DishOrderBridge entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_DishOrderBridges(DishOrderBridge entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DishCatBridge")]
	public partial class DishCatBridge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DC_ID;
		
		private int _M_ID;
		
		private int _Cat_ID;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<MealCategory> _MealCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDC_IDChanging(int value);
    partial void OnDC_IDChanged();
    partial void OnM_IDChanging(int value);
    partial void OnM_IDChanged();
    partial void OnCat_IDChanging(int value);
    partial void OnCat_IDChanged();
    #endregion
		
		public DishCatBridge()
		{
			this._Dish = default(EntityRef<Dish>);
			this._MealCategory = default(EntityRef<MealCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DC_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DC_ID
		{
			get
			{
				return this._DC_ID;
			}
			set
			{
				if ((this._DC_ID != value))
				{
					this.OnDC_IDChanging(value);
					this.SendPropertyChanging();
					this._DC_ID = value;
					this.SendPropertyChanged("DC_ID");
					this.OnDC_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_ID", DbType="Int NOT NULL")]
		public int M_ID
		{
			get
			{
				return this._M_ID;
			}
			set
			{
				if ((this._M_ID != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnM_IDChanging(value);
					this.SendPropertyChanging();
					this._M_ID = value;
					this.SendPropertyChanged("M_ID");
					this.OnM_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_ID", DbType="Int NOT NULL")]
		public int Cat_ID
		{
			get
			{
				return this._Cat_ID;
			}
			set
			{
				if ((this._Cat_ID != value))
				{
					if (this._MealCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCat_IDChanging(value);
					this.SendPropertyChanging();
					this._Cat_ID = value;
					this.SendPropertyChanged("Cat_ID");
					this.OnCat_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishCatBridge", Storage="_Dish", ThisKey="M_ID", OtherKey="M_Id", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.DishCatBridges.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.DishCatBridges.Add(this);
						this._M_ID = value.M_Id;
					}
					else
					{
						this._M_ID = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MealCategory_DishCatBridge", Storage="_MealCategory", ThisKey="Cat_ID", OtherKey="Cat_ID", IsForeignKey=true)]
		public MealCategory MealCategory
		{
			get
			{
				return this._MealCategory.Entity;
			}
			set
			{
				MealCategory previousValue = this._MealCategory.Entity;
				if (((previousValue != value) 
							|| (this._MealCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MealCategory.Entity = null;
						previousValue.DishCatBridges.Remove(this);
					}
					this._MealCategory.Entity = value;
					if ((value != null))
					{
						value.DishCatBridges.Add(this);
						this._Cat_ID = value.Cat_ID;
					}
					else
					{
						this._Cat_ID = default(int);
					}
					this.SendPropertyChanged("MealCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Administrator")]
	public partial class Administrator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Admin_ID;
		
		private System.DateTime _Contract_Start;
		
		private System.DateTime _Contract_End;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdmin_IDChanging(int value);
    partial void OnAdmin_IDChanged();
    partial void OnContract_StartChanging(System.DateTime value);
    partial void OnContract_StartChanged();
    partial void OnContract_EndChanging(System.DateTime value);
    partial void OnContract_EndChanged();
    #endregion
		
		public Administrator()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Admin_ID
		{
			get
			{
				return this._Admin_ID;
			}
			set
			{
				if ((this._Admin_ID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdmin_IDChanging(value);
					this.SendPropertyChanging();
					this._Admin_ID = value;
					this.SendPropertyChanged("Admin_ID");
					this.OnAdmin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_Start", DbType="Date NOT NULL")]
		public System.DateTime Contract_Start
		{
			get
			{
				return this._Contract_Start;
			}
			set
			{
				if ((this._Contract_Start != value))
				{
					this.OnContract_StartChanging(value);
					this.SendPropertyChanging();
					this._Contract_Start = value;
					this.SendPropertyChanged("Contract_Start");
					this.OnContract_StartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_End", DbType="Date NOT NULL")]
		public System.DateTime Contract_End
		{
			get
			{
				return this._Contract_End;
			}
			set
			{
				if ((this._Contract_End != value))
				{
					this.OnContract_EndChanging(value);
					this.SendPropertyChanging();
					this._Contract_End = value;
					this.SendPropertyChanged("Contract_End");
					this.OnContract_EndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Administrator", Storage="_Account", ThisKey="Admin_ID", OtherKey="U_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Administrator = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Administrator = this;
						this._Admin_ID = value.U_ID;
					}
					else
					{
						this._Admin_ID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MealCategory")]
	public partial class MealCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cat_ID;
		
		private string _Cat_Name;
		
		private EntitySet<DishCatBridge> _DishCatBridges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCat_IDChanging(int value);
    partial void OnCat_IDChanged();
    partial void OnCat_NameChanging(string value);
    partial void OnCat_NameChanged();
    #endregion
		
		public MealCategory()
		{
			this._DishCatBridges = new EntitySet<DishCatBridge>(new Action<DishCatBridge>(this.attach_DishCatBridges), new Action<DishCatBridge>(this.detach_DishCatBridges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Cat_ID
		{
			get
			{
				return this._Cat_ID;
			}
			set
			{
				if ((this._Cat_ID != value))
				{
					this.OnCat_IDChanging(value);
					this.SendPropertyChanging();
					this._Cat_ID = value;
					this.SendPropertyChanged("Cat_ID");
					this.OnCat_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat_Name", DbType="VarChar(MAX)")]
		public string Cat_Name
		{
			get
			{
				return this._Cat_Name;
			}
			set
			{
				if ((this._Cat_Name != value))
				{
					this.OnCat_NameChanging(value);
					this.SendPropertyChanging();
					this._Cat_Name = value;
					this.SendPropertyChanged("Cat_Name");
					this.OnCat_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MealCategory_DishCatBridge", Storage="_DishCatBridges", ThisKey="Cat_ID", OtherKey="Cat_ID")]
		public EntitySet<DishCatBridge> DishCatBridges
		{
			get
			{
				return this._DishCatBridges;
			}
			set
			{
				this._DishCatBridges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishCatBridges(DishCatBridge entity)
		{
			this.SendPropertyChanging();
			entity.MealCategory = this;
		}
		
		private void detach_DishCatBridges(DishCatBridge entity)
		{
			this.SendPropertyChanging();
			entity.MealCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DishOrderBridge")]
	public partial class DishOrderBridge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DO_Id;
		
		private int _Dish_Id;
		
		private int _Order_Id;
		
		private System.Nullable<System.DateTime> _Order_Date;
		
		private System.Nullable<int> _Quantity;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDO_IdChanging(int value);
    partial void OnDO_IdChanged();
    partial void OnDish_IdChanging(int value);
    partial void OnDish_IdChanged();
    partial void OnOrder_IdChanging(int value);
    partial void OnOrder_IdChanged();
    partial void OnOrder_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrder_DateChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public DishOrderBridge()
		{
			this._Dish = default(EntityRef<Dish>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DO_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DO_Id
		{
			get
			{
				return this._DO_Id;
			}
			set
			{
				if ((this._DO_Id != value))
				{
					this.OnDO_IdChanging(value);
					this.SendPropertyChanging();
					this._DO_Id = value;
					this.SendPropertyChanged("DO_Id");
					this.OnDO_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dish_Id", DbType="Int NOT NULL")]
		public int Dish_Id
		{
			get
			{
				return this._Dish_Id;
			}
			set
			{
				if ((this._Dish_Id != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDish_IdChanging(value);
					this.SendPropertyChanging();
					this._Dish_Id = value;
					this.SendPropertyChanged("Dish_Id");
					this.OnDish_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Id", DbType="Int NOT NULL")]
		public int Order_Id
		{
			get
			{
				return this._Order_Id;
			}
			set
			{
				if ((this._Order_Id != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Id = value;
					this.SendPropertyChanged("Order_Id");
					this.OnOrder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Order_Date
		{
			get
			{
				return this._Order_Date;
			}
			set
			{
				if ((this._Order_Date != value))
				{
					this.OnOrder_DateChanging(value);
					this.SendPropertyChanging();
					this._Order_Date = value;
					this.SendPropertyChanged("Order_Date");
					this.OnOrder_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishOrderBridge", Storage="_Dish", ThisKey="Dish_Id", OtherKey="M_Id", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.DishOrderBridges.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.DishOrderBridges.Add(this);
						this._Dish_Id = value.M_Id;
					}
					else
					{
						this._Dish_Id = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_DishOrderBridge", Storage="_Order", ThisKey="Order_Id", OtherKey="O_Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.DishOrderBridges.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.DishOrderBridges.Add(this);
						this._Order_Id = value.O_Id;
					}
					else
					{
						this._Order_Id = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderPayDetails")]
	public partial class OrderPayDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OP_Id;
		
		private int _Order_Id;
		
		private int _Total_Points;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOP_IdChanging(int value);
    partial void OnOP_IdChanged();
    partial void OnOrder_IdChanging(int value);
    partial void OnOrder_IdChanged();
    partial void OnTotal_PointsChanging(int value);
    partial void OnTotal_PointsChanged();
    #endregion
		
		public OrderPayDetail()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OP_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OP_Id
		{
			get
			{
				return this._OP_Id;
			}
			set
			{
				if ((this._OP_Id != value))
				{
					this.OnOP_IdChanging(value);
					this.SendPropertyChanging();
					this._OP_Id = value;
					this.SendPropertyChanged("OP_Id");
					this.OnOP_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Id", DbType="Int NOT NULL")]
		public int Order_Id
		{
			get
			{
				return this._Order_Id;
			}
			set
			{
				if ((this._Order_Id != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Id = value;
					this.SendPropertyChanged("Order_Id");
					this.OnOrder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_Points", DbType="Int NOT NULL")]
		public int Total_Points
		{
			get
			{
				return this._Total_Points;
			}
			set
			{
				if ((this._Total_Points != value))
				{
					this.OnTotal_PointsChanging(value);
					this.SendPropertyChanging();
					this._Total_Points = value;
					this.SendPropertyChanged("Total_Points");
					this.OnTotal_PointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderPayDetail", Storage="_Order", ThisKey="Order_Id", OtherKey="O_Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderPayDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderPayDetails.Add(this);
						this._Order_Id = value.O_Id;
					}
					else
					{
						this._Order_Id = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CookingSession")]
	public partial class CookingSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CS_Id;
		
		private System.DateTime _SessionStart;
		
		private System.DateTime _SessionEnd;
		
		private int _SessionDuration;
		
		private int _Cust_Id;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCS_IdChanging(int value);
    partial void OnCS_IdChanged();
    partial void OnSessionStartChanging(System.DateTime value);
    partial void OnSessionStartChanged();
    partial void OnSessionEndChanging(System.DateTime value);
    partial void OnSessionEndChanged();
    partial void OnSessionDurationChanging(int value);
    partial void OnSessionDurationChanged();
    partial void OnCust_IdChanging(int value);
    partial void OnCust_IdChanged();
    #endregion
		
		public CookingSession()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CS_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CS_Id
		{
			get
			{
				return this._CS_Id;
			}
			set
			{
				if ((this._CS_Id != value))
				{
					this.OnCS_IdChanging(value);
					this.SendPropertyChanging();
					this._CS_Id = value;
					this.SendPropertyChanged("CS_Id");
					this.OnCS_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionStart", DbType="DateTime NOT NULL")]
		public System.DateTime SessionStart
		{
			get
			{
				return this._SessionStart;
			}
			set
			{
				if ((this._SessionStart != value))
				{
					this.OnSessionStartChanging(value);
					this.SendPropertyChanging();
					this._SessionStart = value;
					this.SendPropertyChanged("SessionStart");
					this.OnSessionStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionEnd", DbType="DateTime NOT NULL")]
		public System.DateTime SessionEnd
		{
			get
			{
				return this._SessionEnd;
			}
			set
			{
				if ((this._SessionEnd != value))
				{
					this.OnSessionEndChanging(value);
					this.SendPropertyChanging();
					this._SessionEnd = value;
					this.SendPropertyChanged("SessionEnd");
					this.OnSessionEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionDuration", DbType="Int NOT NULL")]
		public int SessionDuration
		{
			get
			{
				return this._SessionDuration;
			}
			set
			{
				if ((this._SessionDuration != value))
				{
					this.OnSessionDurationChanging(value);
					this.SendPropertyChanging();
					this._SessionDuration = value;
					this.SendPropertyChanged("SessionDuration");
					this.OnSessionDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_Id", DbType="Int NOT NULL")]
		public int Cust_Id
		{
			get
			{
				return this._Cust_Id;
			}
			set
			{
				if ((this._Cust_Id != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCust_IdChanging(value);
					this.SendPropertyChanging();
					this._Cust_Id = value;
					this.SendPropertyChanged("Cust_Id");
					this.OnCust_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_CookingSession", Storage="_Account", ThisKey="Cust_Id", OtherKey="U_ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.CookingSessions.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.CookingSessions.Add(this);
						this._Cust_Id = value.U_ID;
					}
					else
					{
						this._Cust_Id = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _O_Id;
		
		private System.DateTime _O_Date;
		
		private int _Dish_ID;
		
		private int _Cust_ID;
		
		private string _Prep_Method;
		
		private System.Nullable<int> _Chef_ID;
		
		private string _Delivery_Method;
		
		private System.Nullable<bool> _IsAccepted;
		
		private string _ReasonRejected;
		
		private System.Nullable<bool> _SeenByChef;
		
		private System.Nullable<bool> _Processed;
		
		private EntitySet<DishOrderBridge> _DishOrderBridges;
		
		private EntitySet<OrderPayDetail> _OrderPayDetails;
		
		private EntitySet<Delivery> _Deliveries;
		
		private EntityRef<Chef> _Chef;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Dish> _Dish;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnO_IdChanging(int value);
    partial void OnO_IdChanged();
    partial void OnO_DateChanging(System.DateTime value);
    partial void OnO_DateChanged();
    partial void OnDish_IDChanging(int value);
    partial void OnDish_IDChanged();
    partial void OnCust_IDChanging(int value);
    partial void OnCust_IDChanged();
    partial void OnPrep_MethodChanging(string value);
    partial void OnPrep_MethodChanged();
    partial void OnChef_IDChanging(System.Nullable<int> value);
    partial void OnChef_IDChanged();
    partial void OnDelivery_MethodChanging(string value);
    partial void OnDelivery_MethodChanged();
    partial void OnIsAcceptedChanging(System.Nullable<bool> value);
    partial void OnIsAcceptedChanged();
    partial void OnReasonRejectedChanging(string value);
    partial void OnReasonRejectedChanged();
    partial void OnSeenByChefChanging(System.Nullable<bool> value);
    partial void OnSeenByChefChanged();
    partial void OnProcessedChanging(System.Nullable<bool> value);
    partial void OnProcessedChanged();
    #endregion
		
		public Order()
		{
			this._DishOrderBridges = new EntitySet<DishOrderBridge>(new Action<DishOrderBridge>(this.attach_DishOrderBridges), new Action<DishOrderBridge>(this.detach_DishOrderBridges));
			this._OrderPayDetails = new EntitySet<OrderPayDetail>(new Action<OrderPayDetail>(this.attach_OrderPayDetails), new Action<OrderPayDetail>(this.detach_OrderPayDetails));
			this._Deliveries = new EntitySet<Delivery>(new Action<Delivery>(this.attach_Deliveries), new Action<Delivery>(this.detach_Deliveries));
			this._Chef = default(EntityRef<Chef>);
			this._Customer = default(EntityRef<Customer>);
			this._Dish = default(EntityRef<Dish>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_O_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int O_Id
		{
			get
			{
				return this._O_Id;
			}
			set
			{
				if ((this._O_Id != value))
				{
					this.OnO_IdChanging(value);
					this.SendPropertyChanging();
					this._O_Id = value;
					this.SendPropertyChanged("O_Id");
					this.OnO_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_O_Date", DbType="DateTime NOT NULL")]
		public System.DateTime O_Date
		{
			get
			{
				return this._O_Date;
			}
			set
			{
				if ((this._O_Date != value))
				{
					this.OnO_DateChanging(value);
					this.SendPropertyChanging();
					this._O_Date = value;
					this.SendPropertyChanged("O_Date");
					this.OnO_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dish_ID", DbType="Int NOT NULL")]
		public int Dish_ID
		{
			get
			{
				return this._Dish_ID;
			}
			set
			{
				if ((this._Dish_ID != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDish_IDChanging(value);
					this.SendPropertyChanging();
					this._Dish_ID = value;
					this.SendPropertyChanged("Dish_ID");
					this.OnDish_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_ID", DbType="Int NOT NULL")]
		public int Cust_ID
		{
			get
			{
				return this._Cust_ID;
			}
			set
			{
				if ((this._Cust_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCust_IDChanging(value);
					this.SendPropertyChanging();
					this._Cust_ID = value;
					this.SendPropertyChanged("Cust_ID");
					this.OnCust_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prep_Method", DbType="VarChar(20)")]
		public string Prep_Method
		{
			get
			{
				return this._Prep_Method;
			}
			set
			{
				if ((this._Prep_Method != value))
				{
					this.OnPrep_MethodChanging(value);
					this.SendPropertyChanging();
					this._Prep_Method = value;
					this.SendPropertyChanged("Prep_Method");
					this.OnPrep_MethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chef_ID", DbType="Int")]
		public System.Nullable<int> Chef_ID
		{
			get
			{
				return this._Chef_ID;
			}
			set
			{
				if ((this._Chef_ID != value))
				{
					if (this._Chef.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChef_IDChanging(value);
					this.SendPropertyChanging();
					this._Chef_ID = value;
					this.SendPropertyChanged("Chef_ID");
					this.OnChef_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Delivery_Method", DbType="VarChar(20)")]
		public string Delivery_Method
		{
			get
			{
				return this._Delivery_Method;
			}
			set
			{
				if ((this._Delivery_Method != value))
				{
					this.OnDelivery_MethodChanging(value);
					this.SendPropertyChanging();
					this._Delivery_Method = value;
					this.SendPropertyChanged("Delivery_Method");
					this.OnDelivery_MethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAccepted", DbType="Bit")]
		public System.Nullable<bool> IsAccepted
		{
			get
			{
				return this._IsAccepted;
			}
			set
			{
				if ((this._IsAccepted != value))
				{
					this.OnIsAcceptedChanging(value);
					this.SendPropertyChanging();
					this._IsAccepted = value;
					this.SendPropertyChanged("IsAccepted");
					this.OnIsAcceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonRejected", DbType="VarChar(50)")]
		public string ReasonRejected
		{
			get
			{
				return this._ReasonRejected;
			}
			set
			{
				if ((this._ReasonRejected != value))
				{
					this.OnReasonRejectedChanging(value);
					this.SendPropertyChanging();
					this._ReasonRejected = value;
					this.SendPropertyChanged("ReasonRejected");
					this.OnReasonRejectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeenByChef", DbType="Bit")]
		public System.Nullable<bool> SeenByChef
		{
			get
			{
				return this._SeenByChef;
			}
			set
			{
				if ((this._SeenByChef != value))
				{
					this.OnSeenByChefChanging(value);
					this.SendPropertyChanging();
					this._SeenByChef = value;
					this.SendPropertyChanged("SeenByChef");
					this.OnSeenByChefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processed", DbType="Bit")]
		public System.Nullable<bool> Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_DishOrderBridge", Storage="_DishOrderBridges", ThisKey="O_Id", OtherKey="Order_Id")]
		public EntitySet<DishOrderBridge> DishOrderBridges
		{
			get
			{
				return this._DishOrderBridges;
			}
			set
			{
				this._DishOrderBridges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderPayDetail", Storage="_OrderPayDetails", ThisKey="O_Id", OtherKey="Order_Id")]
		public EntitySet<OrderPayDetail> OrderPayDetails
		{
			get
			{
				return this._OrderPayDetails;
			}
			set
			{
				this._OrderPayDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Delivery", Storage="_Deliveries", ThisKey="O_Id", OtherKey="Order_Id")]
		public EntitySet<Delivery> Deliveries
		{
			get
			{
				return this._Deliveries;
			}
			set
			{
				this._Deliveries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chef_Order", Storage="_Chef", ThisKey="Chef_ID", OtherKey="Ch_ID", IsForeignKey=true)]
		public Chef Chef
		{
			get
			{
				return this._Chef.Entity;
			}
			set
			{
				Chef previousValue = this._Chef.Entity;
				if (((previousValue != value) 
							|| (this._Chef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chef.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Chef.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Chef_ID = value.Ch_ID;
					}
					else
					{
						this._Chef_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Order", Storage="_Customer", ThisKey="Cust_ID", OtherKey="Cu_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Cust_ID = value.Cu_ID;
					}
					else
					{
						this._Cust_ID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_Order", Storage="_Dish", ThisKey="Dish_ID", OtherKey="M_Id", IsForeignKey=true)]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Dish_ID = value.M_Id;
					}
					else
					{
						this._Dish_ID = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishOrderBridges(DishOrderBridge entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_DishOrderBridges(DishOrderBridge entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_OrderPayDetails(OrderPayDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderPayDetails(OrderPayDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_Deliveries(Delivery entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_Deliveries(Delivery entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Delivery")]
	public partial class Delivery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Del_Id;
		
		private System.Nullable<bool> _Del_Status;
		
		private System.Nullable<int> _Del_Time;
		
		private System.Nullable<System.DateTime> _Del_ExpectedTime;
		
		private int _Order_Id;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDel_IdChanging(int value);
    partial void OnDel_IdChanged();
    partial void OnDel_StatusChanging(System.Nullable<bool> value);
    partial void OnDel_StatusChanged();
    partial void OnDel_TimeChanging(System.Nullable<int> value);
    partial void OnDel_TimeChanged();
    partial void OnDel_ExpectedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDel_ExpectedTimeChanged();
    partial void OnOrder_IdChanging(int value);
    partial void OnOrder_IdChanged();
    #endregion
		
		public Delivery()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Del_Id
		{
			get
			{
				return this._Del_Id;
			}
			set
			{
				if ((this._Del_Id != value))
				{
					this.OnDel_IdChanging(value);
					this.SendPropertyChanging();
					this._Del_Id = value;
					this.SendPropertyChanged("Del_Id");
					this.OnDel_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del_Status", DbType="Bit")]
		public System.Nullable<bool> Del_Status
		{
			get
			{
				return this._Del_Status;
			}
			set
			{
				if ((this._Del_Status != value))
				{
					this.OnDel_StatusChanging(value);
					this.SendPropertyChanging();
					this._Del_Status = value;
					this.SendPropertyChanged("Del_Status");
					this.OnDel_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del_Time", DbType="Int")]
		public System.Nullable<int> Del_Time
		{
			get
			{
				return this._Del_Time;
			}
			set
			{
				if ((this._Del_Time != value))
				{
					this.OnDel_TimeChanging(value);
					this.SendPropertyChanging();
					this._Del_Time = value;
					this.SendPropertyChanged("Del_Time");
					this.OnDel_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Del_ExpectedTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> Del_ExpectedTime
		{
			get
			{
				return this._Del_ExpectedTime;
			}
			set
			{
				if ((this._Del_ExpectedTime != value))
				{
					this.OnDel_ExpectedTimeChanging(value);
					this.SendPropertyChanging();
					this._Del_ExpectedTime = value;
					this.SendPropertyChanged("Del_ExpectedTime");
					this.OnDel_ExpectedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Id", DbType="Int NOT NULL")]
		public int Order_Id
		{
			get
			{
				return this._Order_Id;
			}
			set
			{
				if ((this._Order_Id != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IdChanging(value);
					this.SendPropertyChanging();
					this._Order_Id = value;
					this.SendPropertyChanged("Order_Id");
					this.OnOrder_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_Delivery", Storage="_Order", ThisKey="Order_Id", OtherKey="O_Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.Deliveries.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.Deliveries.Add(this);
						this._Order_Id = value.O_Id;
					}
					else
					{
						this._Order_Id = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
